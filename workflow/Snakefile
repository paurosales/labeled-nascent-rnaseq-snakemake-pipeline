# ------------- SLAM-SEQ ANALYSIS ------------
#
#   SLAM-Seq data analysis (SlamDunk) for paired-end reads
#
#   Author: Paulina Rosales Becerra (2022)

import os
import pandas as pd
import requests
import urllib3
from snakemake.utils import min_version
from snakemake.logging import logger

# Minimal version of snakemake
min_version('6.8.0')


# Load and read Snakemake config 
configfile: 'config/config.yaml'

# --------------------------- Read config file ---------------------------- #

RESULTS_DIR = Path(config['RESULTS_DIR'])
FIGURE_DIR = Path(config['FIGURE_DIR'])
QC_DIR = Path(config['QC_DIR'])

EXTERNAL_DATA_DIR = Path(config['EXTERNAL_DATA_DIR'])
FASTQ_DIR = Path(config['FASTQ_DIR'])

LOG_DIR = Path(config['LOG_DIR'])
TEMP_DIR = Path(config['TEMP_DIR'])
REPORT_DIR = Path(config['REPORT_DIR'])

SUBSET_COLUMN = config['SUBSET_COLUMN']


# --------------------------- Read sample manifest ---------------------------- #
SAMPLE_MANIFEST = pd.read_table(Path(config['SAMPLE_MANIFEST']))
SAMPLE_MANIFEST['Bio_rep'] = SAMPLE_MANIFEST.Bio_rep.astype(str)

# Specify the sample info combinations to use as label per sample
SAMPLES = SAMPLE_MANIFEST.set_index(['Sample_type',
                                     'Treatment',
                                     'Bio_rep'])


# --------------------------- Dictitonaries ---------------------------- #

# GENCODE releases dictionary (release -> genome name # UCSC genome equivalent)
GENCODE_VERSIONS = {
    'M25': 'GRCm38', # mm10
    'M32': 'GRCm39', # mm39
    '19': 'GRCh37', # h19
    '38': 'GRCh38', # h38 
    # 'M1': 'NCBI37' # mm9 uses different handle
}

# Output files dictionary
TARGETS = {'raw_seq': [], 
            'merged_fq': [],
            'fastqc_raw': [],
            'trimmed': [],
            'slam_map': [],
            'slam_filter': [],
            'slam_snp': [],
            'slam_count': [],
            'alley_collapse': [],
            'gene_counts': [],
            'alley_readseparator': [],
            'deeptools': [],
            'alley_rates': [],
            'alley_utrrates': [],
            'alley_snpeval': [],
            'alley_tcperreadpos': [],
            'alley_tcperutrpos': [],
            # 'summary': [],
            'merge': []
            }

# as array for different genomes?
GENCODE_RELEASE = pd.unique(SAMPLES['Target_genome'])[0]
GENOME = GENCODE_VERSIONS[GENCODE_RELEASE]

for sample_type, treatment, bio_rep in SAMPLES.index:
    identifier = SAMPLES.loc[(sample_type, treatment, bio_rep), 'Identifier']
    handle = SAMPLES.loc[(sample_type, treatment, bio_rep), 'Fastq_handle']
    # Select samples with specified value on a given column in the sample manifest (USE CONFIG FILE TO SELECT)
    if SUBSET_COLUMN:
        if SAMPLES.loc[(sample_type, treatment, bio_rep), SUBSET_COLUMN] == config['SUBSET_VALUE']:
            # --------- Raw procesing
            TARGETS['raw_seq'].append(str(FASTQ_DIR / 'raw'/ f'{identifier}_S{handle}_L001_R2_001.fastq.gz'))
            TARGETS['merged_fq'].append(str(FASTQ_DIR / 'merged'/ f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_R2.fq.gz'))
            TARGETS['fastqc_raw'].append(expand('results/quality_control/raw_fastq/{sample_type}_{treatment}_Bio-rep_{bio_rep}/{sample_type}_{treatment}_Bio-rep_{bio_rep}_R{read}_fastqc.html', sample_type=sample_type, treatment=treatment, bio_rep=bio_rep, read=[1,2]))
            TARGETS['trimmed'].append(str(RESULTS_DIR / 'fastq' / 'trimmed' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_R1.fq.gz_trimming_report.txt'))
            TARGETS['slam_map'].append(str(RESULTS_DIR / 'bam_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}.bam'))
            TARGETS['slam_filter'].append(str(RESULTS_DIR / 'bam_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered.bam'))
            TARGETS['slam_snp'].append(str(RESULTS_DIR / 'variant_call' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_snp.vcf'))
            TARGETS['slam_count'].append(str(RESULTS_DIR / 'counts' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_tcount.tsv'))
             # --------- Downstream analysis
            TARGETS['alley_readseparator'].append(str(RESULTS_DIR / 'bam_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_TCReads.bam'))
            TARGETS['deeptools'].append(str(RESULTS_DIR / 'bigwig_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_coverage_fwd.bw'))
            TARGETS['deeptools'].append(str(RESULTS_DIR / 'bigwig_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_coverage_rev.bw'))
            TARGETS['alley_collapse'].append(str(RESULTS_DIR / 'counts' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_tcount_collapsed.csv'))
            TARGETS['alley_rates'].append(str(RESULTS_DIR / 'conversion_rates' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_overallrates.csv'))
            TARGETS['alley_utrrates'].append(str(RESULTS_DIR / 'conversion_rates' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_mutationrates_utr.csv'))
            TARGETS['alley_snpeval'].append(str(RESULTS_DIR / 'quality_control' / 'snp_eval' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_SNPeval.csv'))
            TARGETS['alley_tcperreadpos'].append(str(RESULTS_DIR / 'quality_control' / 'tc_position' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_tcperreadpos.csv'))
            TARGETS['alley_tcperutrpos'].append(str(RESULTS_DIR / 'quality_control' / 'tc_position' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_tcperutr.csv'))
            
    else:
            # --------- Raw procesing
            TARGETS['raw_seq'].append(str(FASTQ_DIR / 'raw'/ f'{identifier}_S{handle}_L001_R2_001.fastq.gz'))
            TARGETS['merged_fq'].append(str(FASTQ_DIR / 'merged'/ f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_R2.fq.gz'))
            TARGETS['fastqc_raw'].append(expand('results/quality_control/raw_fastq/{sample_type}_{treatment}_Bio-rep_{bio_rep}/{sample_type}_{treatment}_Bio-rep_{bio_rep}_R{read}_fastqc.html', sample_type=sample_type, treatment=treatment, bio_rep=bio_rep, read=[1,2]))
            TARGETS['trimmed'].append(str(RESULTS_DIR / 'fastq' / 'trimmed' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_R1.fq.gz_trimming_report.txt'))
            TARGETS['slam_map'].append(str(RESULTS_DIR / 'bam_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}.bam'))
            TARGETS['slam_filter'].append(str(RESULTS_DIR / 'bam_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered.bam'))
            TARGETS['slam_snp'].append(str(RESULTS_DIR / 'variant_call' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_snp.vcf'))
            TARGETS['slam_count'].append(str(RESULTS_DIR / 'counts' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_tcount.tsv'))
             # --------- Downstream analysis
            TARGETS['alley_readseparator'].append(str(RESULTS_DIR / 'bam_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_backgroundReads.bam'))
            TARGETS['alley_readseparator'].append(str(RESULTS_DIR / 'bam_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_TCReads.bam'))
            TARGETS['deeptools'].append(str(RESULTS_DIR / 'bigwig_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_coverage_fwd.bw'))
            TARGETS['deeptools'].append(str(RESULTS_DIR / 'bigwig_files' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_coverage_rev.bw'))
            TARGETS['alley_collapse'].append(str(RESULTS_DIR / 'counts' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_tcount_collapsed.csv'))
            TARGETS['alley_rates'].append(str(RESULTS_DIR / 'conversion_rates' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_overallrates.csv'))
            TARGETS['alley_utrrates'].append(str(RESULTS_DIR / 'conversion_rates' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_mutationrates_utr.csv'))
            TARGETS['alley_snpeval'].append(str(RESULTS_DIR / 'quality_control' / 'snp_eval' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_SNPeval.csv'))
            TARGETS['alley_tcperreadpos'].append(str(RESULTS_DIR / 'quality_control' / 'tc_position' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_tcperreadpos.csv'))
            TARGETS['alley_tcperutrpos'].append(str(RESULTS_DIR / 'quality_control' / 'tc_position' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}' / f'{sample_type}_{treatment}_Bio-rep_{bio_rep}_filtered_tcperutr.csv'))



# --------- All samples 
# TARGETS['summary'].append(str(RESULTS_DIR / 'quality_control' / 'summary' / 'slamseq_summary.txt'))
TARGETS['merge'].append(str(RESULTS_DIR / 'counts' / 'count_matrix' / 'TotalReadCount_mtx.tsv'))
TARGETS['merge'].append(str(RESULTS_DIR / 'counts' / 'count_matrix' / 'TcReadCount_mtx.tsv'))
TARGETS['merge'].append(str(RESULTS_DIR / 'counts' / 'count_matrix' / 'TcReadCount_to_TotalReadCount_mtx.tsv'))
            
    

# --------------------------- Import rules ---------------------------- #

# --------- Raw procesing 
include: 'rules/external_data/merge_lanes.smk'
include: 'rules/external_data/get_refseq.smk'
include: 'rules/mapping/trim_galore.smk'
include: 'rules/mapping/mapping.smk'
include: 'rules/counts/read_counts.smk'
include: 'rules/external_data/annotation_tables.smk'
include: 'rules/counts/collapse_counts.smk'

# --------- Downstream analysis
include: 'rules/downstream/read_separator.smk'
include: 'rules/downstream/deeptools.smk'
include: 'rules/downstream/conversion_rates.smk'
include: 'rules/downstream/read_content_qc.smk'
# include: 'rules/downstream/summary.smk'
# include: 'rules/plots.smk'

# --------------------------- Rules ---------------------------- #


rule multiqc_report:
    input:
        TARGETS['fastqc_raw'],
        TARGETS['trimmed'],
        TARGETS['slam_map'],
        TARGETS['slam_filter'],
        TARGETS['deeptools'],
        TARGETS['slam_snp'],
        TARGETS['slam_count'],
        TARGETS['alley_rates'],
        TARGETS['alley_utrrates'],
        TARGETS['alley_snpeval'],
        TARGETS['alley_tcperreadpos'],
        TARGETS['alley_tcperutrpos'],
        TARGETS['alley_readseparator']
        # TARGETS['summary']
    output:
        base = directory(str(REPORT_DIR / 'multiqc'))
    conda:
        'envs/quality_control/multiqc.yaml'
    log:
        str(LOG_DIR / 'multiqc' / 'multiqc.log')
    shell:
        """
        multiqc --force --interactive \
        -o {output.base} -n multiqc_report.html \
        -m fastqc -m cutadapt -m slamdunk -f \
        {REPORT_DIR} {RESULTS_DIR} {LOG_DIR} &> {log}
        """


rule all:
    input:
        # expand('resources/external/gencode_{release}/{genome}.genome.fa.gz', release=GENCODE_RELEASE, genome=GENOME),
        # TARGETS['raw_seq'],
        # TARGETS['merged_fq']
        TARGETS['fastqc_raw'],
        TARGETS['trimmed'],
        TARGETS['slam_map'],
        TARGETS['slam_filter'],
        TARGETS['deeptools'],
        TARGETS['slam_snp'],
        TARGETS['slam_count'],
        TARGETS['alley_collapse'],
        TARGETS['alley_rates'],
        TARGETS['alley_utrrates'],
        TARGETS['alley_snpeval'],
        TARGETS['alley_tcperreadpos'],
        TARGETS['alley_tcperutrpos'],
        TARGETS['alley_readseparator'],
        # TARGETS['summary'],
        TARGETS['merge'],
        str(REPORT_DIR / 'multiqc')
    default_target: True
